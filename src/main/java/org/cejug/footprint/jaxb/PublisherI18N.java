//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.02.18 at 09:58:49 PM BRT 
//

package org.cejug.footprint.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for publisher.i18n.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * <p>
 * 
 * <pre>
 * &lt;simpleType name="publisher.i18n">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="publisher.ok"/>
 *     &lt;enumeration value="publisher.not.ok"/>
 *     &lt;enumeration value="publisher.execute.query"/>
 *     &lt;enumeration value="publisher.wrong.parameter"/>
 *     &lt;enumeration value="publisher.folder.created"/>
 *     &lt;enumeration value="publisher.path.failure"/>
 *     &lt;enumeration value="publisher.pdf.failed.to.replace"/>
 *     &lt;enumeration value="publisher.pdf.replaced"/>
 *     &lt;enumeration value="publisher.pdf.overwrite"/>
 *     &lt;enumeration value="publisher.pdf.truetype.font.error"/>
 *     &lt;enumeration value="publisher.pdf.truetype.font.loaded"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "publisher.i18n", namespace = "http://footprint.dev.java.net/generated/i18n")
@XmlEnum
public enum PublisherI18N {

    @XmlEnumValue("publisher.ok")
    PUBLISHER_OK("publisher.ok"), @XmlEnumValue("publisher.not.ok")
    PUBLISHER_NOT_OK("publisher.not.ok"), @XmlEnumValue("publisher.execute.query")
    PUBLISHER_EXECUTE_QUERY("publisher.execute.query"), @XmlEnumValue("publisher.wrong.parameter")
    PUBLISHER_WRONG_PARAMETER("publisher.wrong.parameter"), @XmlEnumValue("publisher.folder.created")
    PUBLISHER_FOLDER_CREATED("publisher.folder.created"), @XmlEnumValue("publisher.path.failure")
    PUBLISHER_PATH_FAILURE("publisher.path.failure"), @XmlEnumValue("publisher.pdf.failed.to.replace")
    PUBLISHER_PDF_FAILED_TO_REPLACE("publisher.pdf.failed.to.replace"), @XmlEnumValue("publisher.pdf.replaced")
    PUBLISHER_PDF_REPLACED("publisher.pdf.replaced"), @XmlEnumValue("publisher.pdf.overwrite")
    PUBLISHER_PDF_OVERWRITE("publisher.pdf.overwrite"), @XmlEnumValue("publisher.pdf.truetype.font.error")
    PUBLISHER_PDF_TRUETYPE_FONT_ERROR("publisher.pdf.truetype.font.error"), @XmlEnumValue("publisher.pdf.truetype.font.loaded")
    PUBLISHER_PDF_TRUETYPE_FONT_LOADED("publisher.pdf.truetype.font.loaded");
    private final String value;

    PublisherI18N(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PublisherI18N fromValue(String v) {
        for (PublisherI18N c : PublisherI18N.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
